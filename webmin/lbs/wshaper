#!/bin/bash
#
# $Id: wshaper 2134 2005-03-08 15:55:33Z root $
# 
# Based on Wonder Shaper
# please read the README before filling out these values 
#
# Set the following values to somewhat less than your actual download
# and uplink speed. In kilobits. Also set the device that is to be shaped.

TMPFILE=/tmp/wshaper.$$
grep ^tc_ /etc/webmin/lbs/config >$TMPFILE
. $TMPFILE
rm -f $TMPFILE

UPLINK=$tc_rate
LIMIT=$tc_limit
DEV=$tc_iface

[ ! -z `which tc` ] || exit 1;

# low priority OUTGOING traffic - you can leave this blank if you want
# low priority source netmasks
NOPRIOHOSTSRC=

# low priority destination netmasks
NOPRIOHOSTDST=

# low priority source ports
NOPRIOPORTSRC=

# low priority destination ports
NOPRIOPORTDST=

# Now remove the following two lines :-)


#########################################################

if [ "$1" = "status" ]
then
	tc -s qdisc ls dev $DEV
	tc -s class ls dev $DEV
	exit
fi


# clean existing down- and uplink qdiscs, hide errors
tc qdisc del dev $DEV root    2> /dev/null > /dev/null
tc qdisc del dev $DEV ingress 2> /dev/null > /dev/null

if [ "$1" = "stop" ] 
then 
	exit
fi

if [ "$UPLINK" = "$LIMIT" ]
then 
	exit
fi

###### uplink

# install root HTB

tc qdisc add dev $DEV root handle 1: htb default 10 r2q 100

tc class add dev $DEV parent 1: classid 1:1 htb rate $UPLINK burst 6k

# high prio class 1:10:

tc class add dev $DEV parent 1:1 classid 1:10 htb rate $UPLINK \
   burst 6k prio 1

# tftp class 1:20

tc class add dev $DEV parent 1:1 classid 1:20 htb rate ${LIMIT} \
   burst 6k prio 2

# all get Stochastic Fairness:
tc qdisc add dev $DEV parent 1:10 handle 10: sfq perturb 10
tc qdisc add dev $DEV parent 1:20 handle 20: sfq perturb 10

# start filters
# TOS Minimum Delay (ssh, NOT scp) in 1:10:
#tc filter add dev $DEV parent 1:0 protocol ip prio 10 u32 \
#      match ip tos 0x10 0xff  flowid 1:10

# ICMP (ip protocol 1) in the interactive class 1:10 so we 
# can do measurements & impress our friends:
tc filter add dev $DEV parent 1:0 protocol ip prio 11 u32 \
        match ip protocol 1 0xff flowid 1:10

# prioritize small packets (<64 bytes)

tc filter add dev $DEV parent 1: protocol ip prio 12 u32 \
   match ip protocol 6 0xff \
   match u8 0x05 0x0f at 0 \
   match u16 0x0000 0xffc0 at 2 \
   flowid 1:10

# LBS tftp uses ports 8192 to 8192+128

tc filter add dev $DEV parent 1: protocol ip prio 14 u32 \
    match ip dport 8192 0xff80 flowid 1:20

# + nfs
tc filter add dev $DEV parent 1: protocol ip prio 14 u32 \
    match ip sport 2049 0xffff flowid 1:20

# some traffic however suffers a worse fate

for a in $NOPRIOPORTDST
do
	tc filter add dev $DEV parent 1: protocol ip prio 14 u32 \
	   match ip dport $a 0xffff flowid 1:20
done



for a in $NOPRIOPORTSRC
do
 	tc filter add dev $DEV parent 1: protocol ip prio 15 u32 \
	   match ip sport $a 0xffff flowid 1:20
done

for a in $NOPRIOHOSTSRC
do
 	tc filter add dev $DEV parent 1: protocol ip prio 16 u32 \
	   match ip src $a flowid 1:20
done

for a in $NOPRIOHOSTDST
do
 	tc filter add dev $DEV parent 1: protocol ip prio 17 u32 \
	   match ip dst $a flowid 1:20
done

# rest is 'non-interactive' ie 'bulk' and ends up in 1:20

#tc filter add dev $DEV parent 1: protocol ip prio 18 u32 \
#   match ip dst 0.0.0.0/0 flowid 1:20


########## downlink #############
# slow downloads down to somewhat less than the real speed  to prevent 
# queuing at our ISP. Tune to see how high you can set it.
# ISPs tend to have *huge* queues to make sure big downloads are fast
#
# attach ingress policer:

exit 0

tc qdisc add dev $DEV handle ffff: ingress

# filter *everything* to it (0.0.0.0/0), drop everything that's
# coming in too fast:

tc filter add dev $DEV parent ffff: protocol ip prio 50 u32 match ip src \
   0.0.0.0/0 police rate ${DOWNLINK}kbit burst 10k drop flowid :1
