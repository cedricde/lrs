.TH DMSETUP 8 "Sep 17 2003" "Linux" "MAINTENTANCE COMMANDS"
.SH NAME
dmsetup \- low level logical volume management
.SH SYNOPSIS
.ad l
.B dmsetup create 
.I device_name [-u uuid] [--notable] [table_file]
.br
.B dmsetup remove
.I device_name
.br
.B dmsetup remove_all
.br
.B dmsetup suspend
.I device_name
.br
.B dmsetup resume
.I device_name
.br
.B dmsetup load
.I device_name [table_file]
.br
.B dmsetup clear
.I device_name
.br
.B dmsetup reload
.I device_name [table_file]
.br
.B dmsetup rename
.I device_name new_name
.br
.B dmsetup ls
.br
.B dmsetup info
.I [device_name]
.br
.B dmsetup deps
.I [device_name]
.br
.B dmsetup status
.I [device_name]
.br
.B dmsetup table
.I [device_name]
.br
.B dmsetup wait
.I device_name
.I [event_nr]
.br
.B dmsetup mknodes
.I [device_name]
.br
.B dmsetup targets
.br
.B dmsetup version
.ad b
.SH DESCRIPTION
dmsetup manages logical devices that use the device-mapper driver.  
Devices are created by loading a table that specifies a target for
each sector (512 bytes) in the logical device.

The first argument to dmsetup is a command. 
The second argument is the logical device name or uuid.
.SH OPTIONS
.IP \fB-j|--major\ \fImajor
.br
Specify the major number to use on creation.
.IP \fB-j|--minor\ \fIminor
.br
Specify the minor number to use on creation.
.IP \fB-r|--readonly
.br
Set the table being loaded read-only.
.IP \fB-v|--verbose [-v|--verbose]
.br
Produce additional output.
.IP \fB--version
.br
Display the library and kernel driver version.
.SH COMMANDS
.IP \fBcreate
.I device_name [-u uuid] [--notable] [table_file]
.br
Creates a device with the given name.
If table_file is supplied, the table is loaded and made live.
Otherwise a table is read from standard input unless --notable is used.
The optional uuid can be used in place of
device_name in subsequent dmsetup commands.  
If successful a device will appear as
/dev/device-mapper/<device-name>.  
See below for information on the table format.
.IP \fBdeps
.I [device_name]
.br
Outputs a list of (major, minor) pairs for devices referenced by the
live table for the specified device.
.IP \fBinfo
.I [device_name]
.br
Outputs some brief information about the device in the form:
.br
    State: SUSPENDED|ACTIVE, READ-ONLY
.br
    Tables present: LIVE and/or INACTIVE
.br
    Open reference count
.br
    Last event sequence number (used by \fBwait\fP)
.br
    Major and minor device number
.br
    Number of targets in the live table
.br
    UUID
.IP \fBls
.br
List device names.
.IP \fBload|reload
.I device_name [table_file]
.br
Loads table_file into the inactive table slot for device_name.
If table_file is not supplied, reads a table from standard input.
.IP \fBremove
.I device_name
.br
Removes a device.  It will no longer be visible to dmsetup and
will be deleted when its open_count is zero.
.IP \fBremove_all
.br
Attempts to remove all device definitions i.e. reset the driver.
Use with care!
.IP \fBrename
.I device_name new_name
.br
Renames a device.
.IP \fBresume
.I device_name
.br
Un-suspends a device.  
If an inactive table has been loaded, it becomes live.
Postponed I/O then gets re-queued for processing.
.IP \fBstatus
.I [device_name]
.br
Outputs status information for each of the device's targets.
.IP \fBsuspend
.I device_name
.br
Suspends a device.  Any I/O that has already been mapped by the device
but has not yet completed will be flushed.  Any further I/O to that
device will be postponed for as long as the device is suspended.
.IP \fBtable
.I [device_name]
.br
Outputs the current table for the device in a format that can be fed
back in using the create or load commands.
.IP \fBtargets
.br
Displays the names and versions of the currently-loaded targets.
.IP \fBversion
.br
Outputs version information.
.IP \fBwait
.I device_name
.I [event_nr]
.br
Sleeps until the event counter for device_name exceeds event_nr.
Use -v to see the event number returned.
To wait until the next event is triggered, use \fBinfo\fP to find
the last event number.  
.SH TABLE FORMAT
Each line of the table specifies a single target and is of the form:
.br
    logical_start_sector num_sectors target_type target_args
.br
.br

There are currently three simple target types available together 
with more complex optional ones that implement snapshots and mirrors.

.IP \fBlinear
.I destination_device start_sector
.br
The traditional linear mapping.

.IP \fBstriped
.I num_stripes chunk_size [destination start_sector]+
.br
Creates a striped area.
.br
e.g. striped 2 32 /dev/hda1 0 /dev/hdb1 0
will map the first chunk (16k) as follows:
.br
    LV chunk 1 -> hda1, chunk 1
.br
    LV chunk 2 -> hdb1, chunk 1
.br
    LV chunk 3 -> hda1, chunk 2
.br
    LV chunk 4 -> hdb1, chunk 2
.br
    etc.

.IP \fBerror
.br
Errors any I/O that goes to this area.  Useful for testing or
for creating devices with holes in them.

.SH EXAMPLES

# A table to join two disks together
.br
.br
0 1028160 linear /dev/hda 0
.br
1028160 3903762 linear /dev/hdb 0


# A table to stripe across the two disks, 
.br
# and add the spare space from
.br
# hdb to the back of the volume

0 2056320 striped 2 32 /dev/hda 0 /dev/hdb 0
.br
2056320 2875602 linear /dev/hdb 1028160

.SH AUTHORS
Original version: Joe Thornber (thornber@sistina.com)

.SH SEE ALSO
Device-mapper resource page: http://sources.redhat.com/dm/
